{"posts":[{"title":"Win32 使用 C 调用汇编函数","text":"使用 C 调用汇编函数在上一章中，我们已经配置好了 MSYS2 环境，安装了 GCC 和 NASM。本章将介绍如何通过 C 调用汇编函数。我们将使用 C 的 fastcall 调用约定来调用一个简单的汇编函数，并且演示如何进行编译和链接。 第一步：创建 C 源文件首先，创建一个名为 main.c 的 C 文件，并写入以下代码： 123456789#include &lt;stdio.h&gt;// 声明导入的 add 符号，使用 fastcall 调用约定extern int __attribute__((fastcall)) add(int a, int b);int main(void) { printf(&quot;%d&quot;, add(20, 50)); // 调用汇编函数并打印结果 return 0;} 这里我们使用了 __attribute__((fastcall)) 来指定调用约定，这样函数参数可以通过寄存器传递，并且我们不需要处理堆栈平衡。 第二步：编写汇编代码接下来，创建一个名为 add.asm 的汇编文件，内容如下： 1234567section .text ; 声明 .text 段/节，表示代码段global @add@8 ; 导出符号，使用 Windows 下的符号格式，@开头，@结尾，8表示参数的总字节数@add@8: ; 汇编代码，声明 @add@8 标签 add ecx, edx ; 将传入的两个参数相加 mov eax, ecx ; 将结果放入 eax 中（这是返回值） ret ; 返回 在这个汇编文件中，我们定义了一个名为 @add@8 的函数，它将两个整数相加，并将结果返回。ecx 和 edx 寄存器用于传递 fastcall 调用约定下的参数。 第三步：编译和链接在 MSYS2 的 mingw32 环境下，运行以下命令来编译和链接汇编文件和 C 文件： 12$ nasm -f win32 -o add.o add.asm # 编译汇编代码为目标文件$ gcc -o main.exe add.o main.c # 使用 GCC 链接目标文件和 C 文件为可执行文件 这里我们使用 NASM 将汇编文件编译为 .o 目标文件，然后使用 GCC 链接 C 和汇编的目标文件生成最终的可执行文件。 第四步：运行程序执行生成的可执行文件 main.exe，并查看输出： 1$ ./main.exe 输出结果应为：70 总结通过以上步骤，我们成功地在 C 中调用了汇编函数，并演示了如何使用 fastcall 调用约定进行参数传递。MSYS2 提供了一个简便的开发环境，可以让我们轻松地进行 C 和汇编的混合编程，并且能够跨平台编译和链接。","link":"/2024/09/06/RE/gcc%20nasm%20%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"},{"title":"c &amp; c++ 中 main 函数形参","text":"main函数参数的扩展，特别是从无参数到三个参数的变化，源于C和C++语言的发展及不同操作系统对程序启动方式的需求。 传统的main函数签名在早期的C标准中，main函数的签名通常有两种形式： int main(void) - 无参数。 int main(int argc, char *argv[]) - 有两个参数，分别为： argc: 参数个数，类型为int。 argv: 参数列表，类型为指向字符串数组的指针，即char *argv[]或char **argv。 这两种形式是经典的main函数签名，用于接收命令行参数。 第三个参数的引入第三个参数——char *envp[]，是为了提供对环境变量的访问，某些平台支持main函数的第三个参数。这种形式的main函数通常如下： 1int main(int argc, char *argv[], char *envp[]); envp[]: 这是一个指向字符串数组的指针，其中每个字符串表示一个环境变量。环境变量通常以&quot;NAME=VALUE&quot;的形式表示。 引入背景 环境变量支持： 某些操作系统（例如Unix和某些Linux发行版）支持通过envp[]参数来传递环境变量。这为程序提供了一种直接访问环境变量的方式，尽管并不是所有的平台都强制要求使用这个参数。 POSIX标准： 虽然POSIX标准中main函数的签名并没有强制规定必须包含envp[]参数，但它在许多Unix和Unix-like系统中是可用的。 三个参数形式的应用这种带有第三个参数的main函数形式主要应用于以下情况： 程序需要直接访问环境变量而不通过标准库函数（如getenv()）。 某些嵌入式系统或特殊环境下，操作系统会以这种方式启动程序。 某些历史上使用特定C编译器或平台，可能默认提供了这第三个参数。 标准化和使用现状现代的标准C和C++规范并没有明确规定main函数必须使用第三个参数。标准的main签名依然是int main(void)或int main(int argc, char *argv[])。但在实现上，许多编译器依然支持带有envp[]的第三个参数作为一种扩展。 总结第三个参数envp[]在Unix和类似操作系统中开始流行，主要用于程序对环境变量的访问。虽然现代标准中不强制使用这个第三个参数，但它在某些特定场合仍然可用。","link":"/2024/09/05/RE/c%20&%20c++%20%E4%B8%AD%20main%20%E5%87%BD%E6%95%B0%E5%BD%A2%E5%8F%82/"},{"title":"Win32 MSYS2 NASM GCC 开发","text":"Win32 在 MSYS2 中使用 NASM 进行汇编开发与 GCC 链接在 Windows 系统中进行跨平台开发，MSYS2 提供了一个强大的工具链，特别是对于需要进行汇编开发的用户，MSYS2 提供了灵活的环境来处理 NASM 和 GCC 的集成。下面是一个简单的教程，展示如何使用 MSYS2 环境进行 NASM 汇编开发并通过 GCC 进行链接。 第一步：安装 MSYS2首先，下载并安装 MSYS2。MSYS2 提供了一个轻量级的 POSIX 仿真环境，并且集成了大量的工具包，包括编译器、库和脚本工具。 第二步：安装软件包启动 MSYS2 并选择运行 mingw32 环境（32 位开发环境）。为了更新系统和安装需要的软件包，依次输入以下命令： 1pacman -Syu 该命令将更新系统的软件包。接着，安装 NASM 和 32 位工具链： 12pacman -S nasmpacman -S mingw-w64-i686-toolchain 这将安装 NASM 汇编器和 mingw-w64 32 位编译工具链。 第三步：编写汇编代码在 MSYS2 中创建一个名为 main.asm 的文件，并写入以下代码： 123456789101112section .textextern _printfglobal _main_main: push message call _printf mov eax, 0 retmessage: db 'Hello, World', 0 这段代码定义了一个简单的汇编程序，它调用了 C 标准库中的 printf 函数来打印 “Hello, World”。 第四步：编译汇编代码使用以下命令编译 main.asm 文件为目标文件： 1nasm -f win32 -o main.o main.asm -f win32 指定目标文件格式为 Windows 32 位格式。 第五步：链接目标文件接下来，使用 GCC 将目标文件链接为可执行文件。运行以下命令： 1gcc -m32 -o main.exe main.o 也可以使用 ld 命令手动配置连接但是使用 gcc 命令会自动处理库文件和链接依赖，省去了手动配置链接的复杂性。 注意事项 在 Windows 下，你可以选择在系统中全局安装 NASM，并让 MSYS2 继承 Windows 环境。但这种做法可能会导致环境污染，并且出现文件名冲突问题，例如 link.exe 的冲突。为了避免这种情况，建议直接在 MSYS2 内安装 NASM。 手动使用 ld 进行链接虽然更灵活，但需要更多的配置工作。如果你不熟悉库文件和链接规则，建议使用 GCC 来简化链接过程。 通过以上步骤，你可以在 MSYS2 中轻松进行汇编开发并编译、链接成可执行文件。MSYS2 提供的工具链对于 Windows 用户来说是一个极具实用性的跨平台开发环境。","link":"/2024/09/06/RE/nasm%20gcc%E7%BC%96%E8%AF%91%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/"}],"tags":[],"categories":[],"pages":[]}